============================================================================
Version 1 LSST Logging: Use

Author: Michelle Miller
Date:   Aug. 6, 2006
============================================================================
DESIGN
------
In the current version of logging, we are using a networked logging 
scheme where all nodes involved in computation send their diagnostic
messages to a central node.  The central node stores these messages in
the order they are received.  logReceiver.py is the server-side code and
log.py the client.  The client code implements the LSST Logging API.

Initially, I implemented this design through the use of syslog. 
However, configuring syslog to do the right thing requires root
privileges and that requirement runs counter to the NCSA cluster 
administration.  NCSA requested a user space solution.  So, I
reimplemented the LSST logging API using the Python logging library. 
This library supports many mechanisms for logging.  My plan was to
implement support for TCP sockets, syslog, stdout, and local file
creation/writing.  The server-side code listens on a socket for incoming
log messages and reconfiguration commands.  In this way, a client can
reconfigure the logging mechanism or back-end.

The code currently only supported a centralized server that writes to
one common file for all log messages.  The filename and central server
name are hard-coded.

USAGE
-----
First, you need to edit the log.py and logReceiver.py files to specify
the central machine to receive the log files.  Currently the logfile
is written to /tmp/lsst.log on that central node.  If you would like to
configure it differently, you should edit logReceiver.py to specify the
correct fully-qualified pathname. 

To invoke the function, please refer to the instructions in logging_api.

NOTE: I did not make logReceiver a daemon, so it is susceptible to
interrupts.
