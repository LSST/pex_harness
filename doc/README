
LSST DPS README 
Greg Daues    NCSA 
Sept 07, 2007 

Running the MPI Pipeline Harness in lsst.pex.harness 
r2677 (trunk) Pipeline Harness 

1. Build lsst.pex.harness

    First build the harness/ with scons and run the appropriate declare and 
setup with eups. After the build there will be a working directory bin/ 
that contains

% ls bin/
AssocIPDPTriggerEventTransmit.py  Mops1EventTransmit.py  nodelist.scr  policy  run.sh

% ls bin/policy/
pipeline_policy_Assoc.json  pipeline_policy.json  pipeline_policy_MOPS.json  pipeline_policy_None.json

2. Policy file configuration

    The Pipeline harness is configured with a Policy file 
bin/policy/pipeline_policy.json to select different behavior/scenarios 
in the execution. Three samples are provided in the bin/policy/ 
directory, and may be copied over pipeline_policy.json to implement 
the corresponding scenario.

3. Edit the MPI machinefile

    Edit the MPI machinefile "nodelist.scr" to specify the nodes that 
the MPI harness will use and the number of processes on each. To 
run on a single node with a Pipeline and 3 Slices (4 total processes), 
one can enter, for example,

lsst6.ncsa.uiuc.edu:4

In order to distribute the 4 processes across two nodes, one could use

lsst6.ncsa.uiuc.edu:2
lsst9.ncsa.uiuc.edu:2

4. Set cpu configuration parameters in the run script

    Edit the run script "run.sh" 
and set the values for number of nodes and Slices. The default values are

nodes=1
nslices=3

5. Execute run.sh

    In the bin/ directory execute ./run.sh . The Pipeline Harness will 
start and spawn the specified number of Slices. Depending on the 
Policy configuration, the execution may halt and wait for the arrival of 
events of specified event topics.

6. Execute external event transmitters (if needed)

    In a separate shell execute any required external event transmissions, e.g., 
see the scripts AssocIPDPTriggerEventTransmit.py Mops1EventTransmit.py in the 
bin/ directory. These python scripts will issue an event with appropriate 
topic that the Pipeline will receive. The Pipeline will resume execution and 
issue a new event to the Slices, and the Slices will receive the event and 
proceed with their processing. The contents of the events are place on the 
Clipboards of the Pipeline and the Slices.





r2328 (trunk) Running the MPI Pipeline Harness in lsst.pex.harness  (Old) 
-----------------------------------------------------------------------

The Pipeline harness currently runs in a single demo mode
(as Policies have not yet been configured to allow for more 
flexibility).  The steps for running the demo are :

 1. Build harness 

    Build the harness/ trunk with scons and run the appropriate declare and 
setup with eups. After the build there will be a working directory bin/ 
that contains

% ls bin/
ExternalEventTransmit.py    pipeline.policy   nodelist.scr  run.sh 

 2. Edit the MPI machinefile

    Edit the MPI machinefile "nodelist.scr" to specify the nodes that 
the MPI harness will use and the number of processes on each. 
To run on a single node with a Pipeline and 3 Slices (4 totoal processes), 
one can enter, for example,

lsst6.ncsa.uiuc.edu:4

In order to distribute the 4 processes across two nodes, one could use 

lsst6.ncsa.uiuc.edu:2
lsst9.ncsa.uiuc.edu:2

 3. Set input parameters in the run script 

   Edit the run script "run.sh" and set the values for number 
of nodes and Slices. The default values are

nodes=1
nslices=3

 4. Edit the list of application Stages (pipeline.policy)

   The current "pipeline.policy" does not follow the policy standard.
At this time one simply enters a list of application stages with 
full package name and classname. The default list contains test 
application stages distributed with the lsst.pex.harness package: 

lsst.pex.harness.test.A1Stage.App1Stage
lsst.pex.harness.test.A2Stage.App2Stage
lsst.pex.harness.test.A3Stage.App3Stage
lsst.pex.harness.test.A4Stage.App4Stage
lsst.pex.harness.test.A5Stage.App5Stage

5.  Execute  run.sh 

   In the bin/ directory execute  ./run.sh   . The Pipeline Harness 
will start and spawn the specified number of Slices.  After a short time,
the main Pipeline and the Slices will all reach a state of waiting 
for the arrival of an event as the signal to begin executing their Stages. 

6. Execute  ExternalEventTransmit.py 

   In a separate shell execute  ./ExternalEventTransmit.py in the bin/ directory. 
This python script will issue on event with appropriate topic that the Pipeline 
will receive.  The Pipeline will resume execution and issue a new event to the Slices,
and the Slices will receive the event and proceed with their processing. The contents 
of the events are place on the Clipboards of the Pipeline and the Slices. 





